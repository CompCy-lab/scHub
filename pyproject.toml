[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/schub/_version.py"

[tool.hatch.build.targets.sdist]
only-include = ["src/schub", "docs", "tests", "README.md", "LICENSE", "CHANGELOG.md"]
exclude = ["docs/**/*data", "tests/**/*data", "tests/**/pretrained_models"]

[tool.hatch.build.targets.wheel]
packages = ["src/schub"]

[project]
name = "scHub"
dynamic = ["version"]
description = "The collections of methods for single-cell studies developed in CompCy lab at UNC-Chapel Hill"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Haidong Yi"},
]
maintainers = [
    {name = "Haidong Yi", email = "haidyi@cs.unc.edu"},
]
urls.Documentation = "https://scHub.readthedocs.io/"
urls.Source = "https://github.com/CompCy-lab/scHub"
urls.Home-page = "https://github.com/CompCy-lab/scHub"
dependencies = [
    "anndata",
    "rich",
    "addict",
    "mudata == 0.2.3",
    "scanpy == 1.9.3",
    # for debug logging (referenced from the issue template)
    "torch == 2.0.1",
    "transformers == 4.16.2",
    "geosketch",
    "session-info"
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "twine>=4.0.2",
    "pkginfo>=1.10.0",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # For notebooks
    "ipykernel",
    "ipython",
    "jupyterlab",
    "sphinx-copybutton",
    "pandas",
]
test = [
    "pytest",
    "pytest-html",
    "pytest-xdist",
    "pytest-ordering",
    "pytest_memray",
    "coverage",
]

[tool.coverage.run]
source = ["schub"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]
markers = ["gpu: mark test to run on GPU"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 120

[tool.ruff]
src = ["src"]
line-length = 120
exclude = ["src/**/__init__.py"]

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb"
]
